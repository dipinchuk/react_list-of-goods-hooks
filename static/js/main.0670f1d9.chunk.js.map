{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","buttons","name","Alphabet","color","Length","goods","App","useState","stateSort","setStateSort","stateReverse","setStateReverse","sort","good1","good2","localeCompare","length","reverse","operateGoods","className","map","button","isSort","isReverse","type","classNames","onClick","buttonName","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,mEAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,+BAAAA,E,yBAAAA,M,KAUL,IAAME,EAAoB,CACxB,CACEC,KAAMH,EAASI,SACfC,MAAO,WAET,CACEF,KAAMH,EAASM,OACfD,MAAO,cAET,CACEF,KAAM,UACNE,MAAO,eAIPE,EAAK,UAAON,GAqBT,IAAMO,EAAgB,WAC3B,MAAkCC,mBAAsC,MAAxE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,mBAA2B,MAAnE,mBAAOG,EAAP,KAAqBC,EAArB,KAuBA,OArBAN,EAAK,UAAON,GAvBd,SAAsBS,EAA0BE,GAC9C,OAAQF,GACN,KAAKV,EAASI,SACZG,EAAMO,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MACjD,MACF,KAAKhB,EAASM,OACZC,EAAMO,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMG,OAASF,EAAME,UAMlDN,IACFL,EAAQA,EAAMY,WAYhBC,CAAaV,EAAWE,GAoBtB,sBAAKS,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UAEGnB,EAAQoB,KAAI,SAACC,GACZ,IAAMC,EAASD,EAAOpB,OAASO,EACzBe,EAAYF,EAAOpB,OAASS,EAElC,OACE,wBAEEc,KAAK,SACLL,UAAWM,IACT,SAAUJ,EAAOlB,MAAO,CAAE,WAAYmB,GAAUC,IAElDG,QAAS,WAhCrB,IAAqBC,EACA,aADAA,EAiCKN,EAAOpB,MA9B3BU,EADED,EACc,KAEAiB,GAGlBlB,EAAakB,IAkBP,SAUGN,EAAOpB,MATHoB,EAAOpB,UAefO,GAAaE,IAEZ,wBACEc,KAAK,SACLL,UAAU,4BACVO,QAAS,WAlCnBjB,EAAa,MACbE,EAAgB,OA8BR,sBAaN,6BACGN,EAAMe,KAAI,SAAAQ,GAAI,OAAK,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YC/HpDC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0670f1d9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Alphabet = 'Sort alphabetically',\n  Length = 'Sort by length',\n}\n\ntype Button = {\n  name: SortType | 'Reverse',\n  color: 'is-info' | 'is-success' | 'is-warning',\n};\n\nconst buttons: Button[] = [\n  {\n    name: SortType.Alphabet,\n    color: 'is-info',\n  },\n  {\n    name: SortType.Length,\n    color: 'is-success',\n  },\n  {\n    name: 'Reverse',\n    color: 'is-warning',\n  },\n];\n\nlet goods = [...goodsFromServer];\n\nfunction operateGoods(stateSort: string | null, stateReverse: string | null) {\n  switch (stateSort) {\n    case SortType.Alphabet:\n      goods.sort((good1, good2) => good1.localeCompare(good2));\n      break;\n    case SortType.Length:\n      goods.sort((good1, good2) => good1.length - good2.length);\n      break;\n    default:\n      break;\n  }\n\n  if (stateReverse) {\n    goods = goods.reverse();\n  }\n\n  return '';\n}\n\nexport const App: React.FC = () => {\n  const [stateSort, setStateSort] = useState<SortType | 'Reverse' | null>(null);\n  const [stateReverse, setStateReverse] = useState<'Reverse' | null>(null);\n\n  goods = [...goodsFromServer];\n\n  operateGoods(stateSort, stateReverse);\n\n  function checkButton(buttonName: SortType | 'Reverse') {\n    if (buttonName === 'Reverse') {\n      if (stateReverse) {\n        setStateReverse(null);\n      } else {\n        setStateReverse(buttonName);\n      }\n    } else {\n      setStateSort(buttonName);\n    }\n  }\n\n  function resetButton() {\n    setStateSort(null);\n    setStateReverse(null);\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n\n        {buttons.map((button) => {\n          const isSort = button.name !== stateSort;\n          const isReverse = button.name !== stateReverse;\n\n          return (\n            <button\n              key={button.name}\n              type=\"button\"\n              className={classNames(\n                'button', button.color, { 'is-light': isSort && isReverse },\n              )}\n              onClick={() => {\n                checkButton(button.name);\n              }}\n            >\n              {button.name}\n            </button>\n          );\n        })}\n\n        {\n          (stateSort || stateReverse)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => {\n                resetButton();\n              }}\n            >\n              Reset\n            </button>\n          )\n        }\n      </div>\n\n      <ul>\n        {goods.map(good => (<li data-cy=\"Good\" key={good}>{good}</li>))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}